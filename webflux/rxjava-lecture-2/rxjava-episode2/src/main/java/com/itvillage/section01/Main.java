package com.itvillage.section01;

/**
 * [물리적인 쓰레드와 논리적인 쓰레드의 이해]
 * - 물리적인 쓰레드는 하드웨어와 관련이 있고, 논리적인 쓰레드는 소프트웨어와 관련이 있다.
 * - 물리적인 쓰레드를 이해하기 위해서는 CPU의 코어를 먼저 알아야한다.
 *
 * 1) 코어란?
 * = CPU의 명령어를 처리하는 반도체 유닛
 * = 코어의 갯수가 많으면 명령어를 병렬(parallel)로 더 많이 더 빠르게 처리할 수 있다.
 *
 * 2) 물리적인 쓰레드
 * = 물리적인 코어를 논리적으로 쪼갠 논리적 코어
 * = 실제 CPU 내부에 core가 있고 (물리적인 코어) 이 core를 가상으로 쪼갠 Thread들을 물리적인 쓰레드라고 한다.
 * = 코어를 논리적으로 쪼갠 것이므로 논리적인 코어라고도 한다.
 * = 하나의 코어 안에서 여러 쓰레드로 실행되어 병렬로 더 많은 프로세스를 수행한다.
 *
 * 3) 논리적인 쓰레드
 * = 자바 프로그래밍에서 사용하는 쓰레드
 * = 논리적인 스레드는 프로세스 내에서 실행되는 세부 작업의 단위
 * = 프로세스는 컴퓨터에서 실행할 수 있는 실행 파일(프로그램)을 실행하면 생기는 인스턴스다.
 * = 논리적인 스레드의 생성 개수는 이론적으로는 제한이 없지만, 실제로는 물리적인 스레드의 가용 범위내에서 생성할 수 있다.
 *
 * [CPU] - 병렬성
 * core
 * 물리적인 Thread
 * 물리적인 Thread
 *
 * core
 * 물리적인 Thread
 * 물리적인 Thread
 *
 * [소프트웨어 프로세스] - 동시성 (병렬적으로 수행되는것으로 보이지만, 여러개의 작업들이 짧은시간에 번갈아가면서 수행) - 자바의 쓰레드
 * 논리적인 Thread (얼마든지 생성 가능)
 * 논리적인 Thread (얼마든지 생성 가능)
 * 논리적인 Thread (얼마든지 생성 가능)
 * 논리적인 Thread (얼마든지 생성 가능)
 *
 * [스케줄러]
 * Schedulers.trampoline()
 * = 현재 실행되고있는 쓰레드에 큐(Queue)를 생성하여 처리할 작업들을 큐에 넣고 순서대로 처리한다.
 *
 * Schedulers.single()
 * = 단일 쓰레드를 생성하여 처리 작업을 진행한다.
 * = 여러번 구독해도 공통으로 사용한다.
 *
 * Schedulers.from(executor)
 * = Executor를 사용해서 생성한 쓰레드를 사용한다.
 * = RxJava의 Scheduler와 Executor의 동작 방식이 다르므로 자주 사용되지 않는다.
 */
public class Main {
}

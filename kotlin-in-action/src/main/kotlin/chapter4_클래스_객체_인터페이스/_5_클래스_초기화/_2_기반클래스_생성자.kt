package chapter4_클래스_객체_인터페이스._5_클래스_초기화

/*
클래스에 기반 클래스가 있다면 주 생성자에서 기반 클래스의 생성자를 호출해야할 필요가 있다.
기반 클래스를 초기화하려면 기반 클래스 이름 뒤에 괄호를 치고 생성자 인자를 넘긴다.
 */
open class OpenUser(val nickname: String) {}
class TwitterUser(nickname: String) : OpenUser(nickname) {}

// 클래스를 정의할때 별도로 생성자를 정의하지 않으면 컴파일러가 자동으로 아무 일도 하지 않는 인자가 없는 디폴트 생성자를 만든다.
open class Button // 인자가 없는 디폴트 생성자가 만들어진다.
// Button 생성자는 아무 인자도 받지 않지만, Button 클래스를 상속한 하위 클래스는 반드시 Button 클래스의 생성자를 호출해야한다.
class RadioButton: Button()

/*
이 규칙으로 인해, 기반 클래스의 이름 뒤에는 꼭 빈 괄호가 들어간다.
반면 인터페이스는 생성자가 없기 때문에 어떤 클래스가 인터페이스를 구현하는 경우, 그 클래스의 상위 클래스 목록에 있는
인터페이스 이름 뒤에는 아무 괄호도 없다.
클래스 정의에 있는 상위 클래스 및 인터페이스 목록에서 이름 뒤에 괄호가 붙었는지 살펴보면 쉽게 기반 클래스와 인터페이스를 구별할 수 있다.
어떤 클래스를 클래스 외부에서 인스턴스화하지 못하게 막고 싶다면 모든 생성자를 private 으로 만들면 된다.
 */
//주 생성자에 private 변경자를 붙일 수 있다.
class Secretive private constructor() {} // 이 클래스의 유일한 주 생성자는 비공개다.
// 외부에서는 Secretive를 인스턴스화할 수 없다.
// 생성자에 아무 파라미터도 없는 클래스도 많고, 생성자 코드 안에서 생성자가 인자로 받은 값을 프로퍼티에 설정하기만 하는 생성자도 많다.

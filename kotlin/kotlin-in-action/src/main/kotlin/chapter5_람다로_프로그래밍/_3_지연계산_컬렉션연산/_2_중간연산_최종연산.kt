package chapter5_람다로_프로그래밍._3_지연계산_컬렉션연산

/*
    시퀀스에 대한 연산은 중간연산, 최종연산으로 나뉜다.
    중간 연산은 다른 시퀀스를 반환한다.
    그 시퀀스는 최초 시퀀스의 원소를 변환하는 방법을 안다.
    최종 연산은 결과를 반환한다.

 */
fun main() {
    val people = listOf(
        Person("Alice", 29),
        Person("Bob", 31)
    )

    /*
        map, filter : 중간연산
        toList() : 최종연산
     */
    val toList = people.asSequence() // 원본 컬렉션을 시퀀스로 변환한다.
        .map(Person::name)
        .filter { it.startsWith("김") }
        .toList() //결과 시퀀스를 다시 리스트로 변환한다.

    /* 최종 연산이 없는 경우 */
    listOf(1, 2, 3, 4)
        .asSequence()
        .map { print("map : $it"); it * it }
        .filter { print("filter : $it"); it > 5}

    // 아무 내용도 출력되지 않는다.
    // map, filter 변환이 늦춰져서 결과를 얻을 필요가 있을때 (즉, 최종 연산이 호출될때) 적용된다는 뜻이다.

    /* 최종 연산이 호출되는 경우 */
    val list = listOf(1, 2, 3, 4)
        .asSequence()
        .map { print("map : $it"); it * it }
            // map : 1 filter : 1 map : 2 filter : 4 map : 3 filter : 9 map : 4 filter : 16
        .filter { print("filter : $it"); it > 5}
        .toList() // 출력된다.

    /*
       컬렉션에 대한 map, filter 연산 순서
       1) map 함수를 각 원소에 대해 먼저 수행해서 새 시퀀스를 얻는다.
       2) 그 시퀀스에 대해 다시 filter을 수행한다.

       시퀀스에 대한 map, filter 연산 순서
       1) 모든 연산은 각 원소에 대해 순차적으로 적용된다.
       - 즉, 첫번째 원소가 변환된 다음 걸러지는 처리가 되고, 다시 두번째 원소가 처리되어 모든 원소에 적용된다.

       따라서 연산을 차례대로 적용하다가 결과가 얻어지면 그 이후의 원소에 대해서는 변환이 이뤄지지 않을 수도 있다.
     */

    /*
        예제 살펴보기

        map으로 리스트의 각 숫자를 제곱하고 제곱한 숫자 중에서 find로 3보다 큰 첫번재 원소를 찾자.
     */
    println(listOf(1, 2, 3, 4).asSequence().map { it * it }.find { it > 3 }) // 4

    /*
        같은 연산을 시퀀스가 아니라 컬렉션에 수행하면 map의 결과가 먼저 평가돼 최초 컬렉션의 모든 원소가 변환된다.
        두번째 단계에서는 map을 적용해서 얻는 중간 컬렉션으로부터 술어를 만족하는 원소를 찾는다.
        시퀀스를 사용하면 지연계산으로 인해 원소 중 일부의 계산은 이뤄지지 않는다.

        컬렉션을 사용하면 리스트가 다른 리스트로 변환된다.
        그래서 map 연산은 3과 4를 포함하여 모든 원소를 변환한다.
        그 후 find가 술어를 만족하는 첫번째 원소인 4를 찾는다.

        시퀀스를 사용하면 find 호출이 원소를 하나씩 처리하기 시작한다.
        최초 시퀀스로부터 수를 하나 가져와서 map에 지정된 변환을 수행한 다음에 find에 지정된 술어로 만족하는지 검사한다.
        이미 '2'일때 답을 찾았으므로 그 이후인 '3', '4'는 처리하지 않는다.
     */

}
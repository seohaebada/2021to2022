package chapter4_클래스_객체_인터페이스._2_변경자._가시성_변경자

/*
가시성 변경자
코드 기반에 있는 선언에 대한 클래스 외부 접근을 제어한다.

어떤 클래스의 구현에 대한 접근을 제한함으로써 그 클래스에 의존하는 외부 코드를 깨지 않고도
클래스 내부 구현을 변경할 수 있다.

자바와 같은 public, protected, private 변경자가 있다.
하지만 코틀린의 기본 가시성은 자바와 다르다.
아무 변경자도 없는 경우 선언은 모두 공개(public) 된다.

자바의 기본 가시성인 패키지 전용은 코틀린에 없다. (package-private)
코틀린은 패키지를 namespace를 관리하기 위한 용도로만 사용한다.
그래서 패키지를 가시성 제어에 사용하지 않는다.

패키지 전용 가시성에 대한 대안으로 코틀린에는 internal 이라는 새로운 가시성 변경자를 도입했다.
internal은 "모듈 내버에서만 볼 수 있다."
모듈은 한번에 한꺼번에 컴파일되는 코틀린 파일들을 의미한다.
(인텔리J, 이클립스, 메이븐, 그레이들 등의 프로젝트가 모듈이 될 수 있다.)

모듈 내부 가시성은 여러분의 모듈의 구현에 대해 진정한 캡슐화를 제공한다는 장점이 있다.
자바에서는 패키지가 같은 클래스를 선언하기만 하면 어떤 프로젝트의 외부에 있는 코드라도 패키지 내부에 있는
패키지 전용 선언에 쉽게 접근할 수 있다.
그래서 모듈의 캡슐화가 쉽게 깨진다.

다른 차이는 코틀린에서는 최상위 선언에 대해 private 가시성을 허용한다.
글너 최상위 선언에는 클래스, 함수, 프로퍼티 등이 포함된다.
비공개 가시성인 최상위 선언은 그 선언이 들어있는 파일 내부에서만 사용할 수 있다.
이 또한 하위 시스템의 자세한 구현 사항을 외부에 감추고 싶을때 유용한 방법이다.

public, internal, protected, private
 */